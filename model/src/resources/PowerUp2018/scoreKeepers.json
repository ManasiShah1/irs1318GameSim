//redSwitchScoreKeeper
{
  "name" : "redSwitchScoreKeeper",
  "type" : "scoreKeeper",
  "alliance" : "red",
  "listensTo" : [
    {
      "actorName" : "powerUpQueue",
      "emittedEvents" : [
        {"eventName" : "powerUpEvent",
          "properties": {
            "powerUp" : "string", // force, boost
            "target" : "string", // switch, scale, both
            "alliance" : "string", // red, blue
            "status" : "string" // activated, expired
          }
        }
      ]
    }
    },
    {
      "redPlateRedSwitch" : {
        "addCubeEvent" : {"owner" : "string"},
          "removeCubeEvent" : {"owner" : "string"}
          },
    {
      "bluePlateRedSwitch" : {
        "addCubeEvent" : {"owner" : "string"},
          "removeCubeEvent" : {"owner" : "string"}
          },
          "G25FoulTracker" : {"g25FoulEvent" : {
            "alliance" : "string"},
            "field" : {
              "phaseChangeEvent" : {
                "phase": "string"
                "emits" : {
                  "scoreEvent",
                  futureScoreEvent,
                  removeFutureScoreEvent,
                  ownershipChangeEvent
                }

              },

              //SwitchOwnershipStateMachine
              Switch Ownership State Machine:{ // red is positive, blue is negative

                “name” : “ownership”,
              // “alliance” : “string”, // red, blue
              “events” : [
              {
              “name” : ownershipChangeEvent,
              “type” : “output”,
              “data” : [
              {
              “owner” : “string” // red, neutral, blue
              }
              ]
              }
              “data” : [
              {
              “name” : “ownershipCount”
              “type” : “int”
              },
              {
              name : forcedOwner,
              type : string // red, blue, none
              }
              ],
              dataUpdate : [
              {
              “event : “addCubeEvent”,
              “onReceive” : “if addCubeEvent.owner == red then ownershipCount++ else ownershipCount--“
              },
              {
              “event : “removeCubeEvent”,
              “onReceive” : “if removeCubeEvent.owner == red then ownershipCount-- else ownershipCount++“
              },
              {event},
              {}
              ],
              “initialState” : “neutralOwnership”,
              “states” : [
              {
              “name” : “redOwnership”
              “events” : {
              “onEntry” : “ownershipChangeEvent”:{ “owner” : red}
              }
              }
              {
              “name” : “neutralOwnership”
              “events” : {
              “onEntry” : “ownershipChangeEvent” : { “owner” : “neutral” }
              }
              }
              {
              “name” : “blueOwnership”
              “events” : {
              “onEntry” : “ownershipChangeEvent” : { “owner” : “blue” }
              }
              }
              ]
              “transitions” : [
              {
              // neutral to red b/c add
              “from” : “neutralOwnership”
              “trigger” : “addCubeEvent”
              “guard” : “ownershipCount > 0”
              “to” : {
              “onTrue” : “redOwnership”
              }
              }
              {
              // neutral to red b/c remove
              “from” : “neutralOwnership”
              “trigger” : “removeCubeEvent”
              “guard” : “ownershipCount > 0”
              “to” : {
              “onTrue” : “redOwnership”
              }
              }
              {
              // neutral to blue b/c add
              “from” : “neutralOwnership”
              “trigger” : “addCubeEvent”
              “guard” : “ownershipCount < 0”
              “to” : {
              “onTrue” : “blueOwnership”
              }
              }
              {
              // neutral to blue b/c remove
              “from” : “neutralOwnership”
              “trigger” : “removeCubeEvent”
              “guard” : “ownershipCount < 0”
              “to” : {
              “onTrue” : “blueOwnership”
              }
              }
              {
              // red to neutral b/c add
              “from” : “redOwnership”
              “trigger” : “addCubeEvent”
              “guard” : “ownershipCount == 0”
              “to” : {
              “onTrue” : “neutralOwnership”
              }
              }
              {
              // red to neutral b/c remove
              “from” : “redOwnership”
              “trigger” : “removeCubeEvent”
              “guard” : “ownershipCount == 0”
              “to” : {
              “onTrue” : “neutralOwnership”
              }
              }
              {
              // blue to neutral b/c add
              “from” : “blueOwnership”
              “trigger” : “addCubeEvent”
              “guard” : “ownershipCount == 0”
              “to” : {
              “onTrue” : “neutralOwnership”
              }
              }
              {
              // blue to neutral b/c remove
              “from” : “blueOwnership”
              “trigger” : “removeCubeEvent”
              “guard” : “ownershipCount == 0”
              “to” : {
              “onTrue” : “neutralOwnership”
              }
              }
              ]
              }

              //PowerUp State Machine
              {
              "name”: “powerUp”,
              "alliance” : “string” // red, blue
              “target” : “string” // switch, scale
              “powerUp” : “string” // force, boost
              “events”: [
              {
              “name”: powerUpEvent,
              “type”: “input”,
              “data” : [
              {
              “owner” : “string” // red,blue
              “alliance” : “string” // red, blue
              “target” : “string” // switch, scale,
              both
              “powerUp” : “string” // boost, force
              “status” : “string” // activated, expired
              }
              ]
              },
              ],
              “states”: [
              {
              “name”: powerUpInactive,
              },
              {
              “name”: powerUpActive,
              }
              ]
              “transitions”: [
              // inactive to active
              {
              “from: “powerUpInactive”,
              “trigger”: “powerUpEvent”,
              “guard” : “powerUpEvent.alliance == alliance && powerUpEvent.status == activated && powerUpEvent.powerUp == powerUp && (powerUpEvent.target == both || powerUpEvent.target == target)
              “to”: {
              “onTrue”: “powerUpActive”
              }
              }
              // active to inactive
              {
              “from: “powerUpActive”,
              “trigger”: “powerUpEvent”,
              “guard” : “powerUpEvent.alliance == alliance && powerUpEvent.status == expired && powerUpEvent.powerUp == powerUp && (powerUpEvent.target == both || powerUpEvent.target == target)
              “to”: {
              “onTrue”: “powerUpInactive”
              }
              }
              ],
              “initialState”: powerUpInactive
              }

              //Force State Machine
              {
              “name”: force,
              “events”: [
              {
              “name”: forceActivateEvent,
              “type”: force
              },
              {
              “name”: forceDeactivateEvent,
              “type”: force
              }
              ],
              “states”: [
              {
              “name”: forceInactive,
              “events”: {
              }
              },
              {
              “name”: forceActive,
              “events”: {
              }
              }
              ],
              “transitions”: [
              {

              }
              {
              “trigger: “forceExpireEvent”,
              “from”: “forceActive”,
              “to: “forceInactive”
              }
              ],
              “initialState”: forceInactive
              }

              //r1ClimbScoreKeeper
              {
              “name”: “r1ClimbScoreKeeper”,
              “type”: “scoreKeeper”,
              “alliance”: “red”,
              “robot”: “r1”,
              “listensTo”: [
              {
              “G18FoulTracker”: {g18FoulEvent : {alliance: string//
              red, blue}
              “field”: {phaseChangeEvent: string//pre, auto, teleop,
              endGame, post},
              “redPlatformClimbZone”: {
              “ExitPlatformClimbZoneEvent”: {redRobot: string// r1, r2, r3},
              “ParkedEvent”: {redRobot: string// r1, r2, r3},
              “ClimbedEvent”:{redRobot: string// r1, r2, r3},
              “redFaceTheBossScoreKeeper”: {levitateActiveEvent :
              redRobot: string// r1, r2, r3}
              }
              ],
              emits: {
              scoreEvent,
              parkEvent,
              climbedEvent,
              },
              },

              //Climb Location Condition State Machine
              “Location Condition State Machine”: {

              “name”: “locationCondition”,
              “alliance” : “string” // red, blue,
              “robot”: “string” // r1, r2, r3, b1, b2, b3
              “events”: [
              {
              “name”: ParkEvent,
              “type”: “output”,
              },
              “name”: ExitPlatformClimbZoneEvent,
              “type: “output”
              },
              ],
              “states”: [
              {
              “name”: Parked,
              “events”: {
              “onEntry”: “ParkEvent”
              “onExit”: “ExitPlatformClimbZoneEvent”
              },
              {
              “name”: NotInPlatformClimbZone,
              “events”: {
              “onEntry”: “ParkEvent”
              “onExit”: “ExitPlatformClimbZoneEvent”:
              },
              ]
              “transitions”: [
              //Parking in Platform Zone
              {
              “from”: “NotInPlatformClimbZone”
              “to”: “Parked”,
              trigger: “ParkedEvent”
              },

              //Exiting Platform Zone
              {
              “from”: “Parked”
              “to”: “NotInPlatformClimbZoneEvent”,
              trigger: “ExitPlatformClimbZone”
              }
              ]
              },

              //Climb Condition State Machine
              “Climb Condition State Machine”: {

              “name”: “climbCondition”,
              “alliance” : “string” // red, blue,
              “robot”: “string” // r1, r2, r3, b1, b2, b3
              “events”: [
              {
              “name”: ClimbedEvent,
              “type”: “output”,
              },
              {
              “name”: DroppedEvent,
              “type: “input”,
              },
              ],
              “states”: [
              {
              “name”: Climbed,
              “events”: {
              “onEntry”: “ClimbedEvent”,
              “onExit”: “DroppedEvent”
              }
              {
              “name”: notClimbed
              ],
              “transitions”: [
              //Robot Climbed to notClimbed through Dropped
              {
              “from”: “Climbed”
              “to”: “notClimbed”,
              “trigger”: “DroppedEvent”
              },

              //Robot Parked to Climbed
              {
              “from”: “notClimbed”,
              “to”: “Climbed”,
              “trigger”: “ClimbedEvent”
              }

              ],
              “initialState”: notClimbed
              },

              //(@EndGame) Scorable State Machine
              “Climb Scorable State Machine”: {
              “name”: scorable,
              “alliance” : “string” // red, blue,
              “robot”: “string” // r1, r2, r3, b1, b2, b3
              “events”: [
              {
              “name”: fieldPhaseChangeEvent,
              “type”: “input”,
              “data”: {
              {fieldPhase: //String pre, auto, teleop,
              endGame, post}
              }
              ],
              “states”: [
              {
              “name”: scorable,
              “events”: {
              “onEntry”: “ScorableEvent”,
              “onExit”: “nonScorableEvent”,
              }
              {
              “name”: nonScorable,
              “events”: {
              “onEntry”: “nonScorableEvent”,
              “onExit”: “ScorableEvent”,
              }
              ],
              “transitions”: [
              //Climb becomes scorable
              {
              “from”: “nonScorable”
              “to”: “scorable”,
              “trigger”: fieldPhaseChangeEvent {fieldPhase: post}
              “guard”: t = 0

              },

              //Climb becomes not scorable
              {
              “from”: “Parked”
              “to”: “Climbed”,
              “trigger”: fieldPhaseChangeEvent {fieldPhase: post}
              “guard”:t < 0
              }
              ],
              “initialState”: “nonScorable”
              },

              //Face The Boss ScoreKeeper
              {
              “name”: redFaceTheBossScoreKeeper,
              “type”: scorekeeper,
              “alliance” : red,
              “redRobot”: {r1, r2, r3}
              “listensTo”: [
              {
              “LevitateColumnScoreKeeper”:{
              {status: string // levitateActive, levitateInactive},
              levitateActivatedEvent: {alliance: red}
              },
              {
              “G18FoulTracker”: {
              g18FoulEvent: {alliance: string// red, blue}
              },
              {
              “field”: {
              phaseChangeEvent: {phase// pre, auto, teleop, endGame,
              post}
              },
              {
              “r1RobotClimbScoreKeeper”: {ClimbEvent,
              ParkEvent}
              },
              {
              “r2RobotClimbScoreKeeper” : {r1ClimbEvent,
              r2ParkEvent}
              },
              {
              “r3RobotClimbScoreKeeper” : {r3ClimbEvent,
              r3ParkEvent}
              }
              ],
              “emits”: rankingScoreEvent
              },



              //Levitate State Machine (Face The Boss)
              “Levitate State Machine” : {

              “name”: levitate
              “alliance” : “string” // red, blue
              “events”: [
              {
              “name”: levitateActivatedEvent,
              “type”: “input”,
              “data”: {“alliance”: “string” //red, blue}

              },
              {
              “name”: ClimbEvent,
              “type”: “input”,
              “data”: {“robot”: //string r1, r2, r3, b1, b2, b3}
              },
              {
              “name”: ParkEvent,
              “type”: “input”,
              “data”: {“robot”: //string r1, r2, r3, b1, b2, b3}
              }
              ],
              “states”: [
              {
              “name”: “levitateActive”,

              },
              “name”: “levitateInactive”,
              }
              ],
              “transitions”: [
              //Inactive to Active b/c of button Press
              {
              “from”: “levitateInactive”,
              “to”: “levitate	Active”,
              “trigger”: “levitateActivatedEvent”
              }

              //Active to Inactive b/c all three robots climbed
              //Active to Active b/c all three robots didn’t climb
              {
              “from”: “levitateActive”,
              “trigger”: “r1/b1.climbEvent”,
              “guard”: if(ClimbedEvent == 3),
              “to”: {
              “onTrue”: “levitateInactive”
              “onFalse”: “levitateActive”
              }
              ],
              initialState: “levitateInactive”
              }

              //Alliance Climb State Machine
              “Alliance Climb State Machine” : {

              “name”: allianceClimb
              “alliance” : “string” // red, blue
              “phase”: endGame // t = 0
              “robots”: “string” //r1, r2, r3, b1, b2, b3
              “events”: [
              {
              “name”: ClimbEvent,
              “type”: “input”,
              “data”: {“alliance”: “string” //red, blue}

              },
              ],
              “states”: [
              {
              “name”: “allRobotsClimbed”,

              },
              “name”: “notAllRobotsClimbed”,
              }
              ],
              “transitions”: {
              //notAllRobotsClimbed to allRobotsClimbed
              //If condition false, stays notAllRobtsClimbed
              {
              “from”: “notAllRobotsClimbed”,
              “trigger”: “ClimbEvent”
              “guard”: if(ClimbEvent == 3)
              “to”: {
              “onTrue”: “allRobotsClimbed”,
              “onFalse”: “notAllRobotsClimbed”
              }
              }

              },
              initialState: “notAllRobotsClimbed”
              }

              //Auto Run Scorekeeper
              {
              “name”: autoRunScorekeeper,
              “type”: scorekeeper,
              “alliance”: red,
              “robot”: r1,
              “listensTo”: [
              {
              “field”: {phaseChangeEvent: string}
              },
              {
              “redBaselineZone”: {
              “robotExitEvent”: {owner: string//red, blue},
              “robotEnterEvent”: {owner: string//red, blue}
              }
              ]
              }

              //Baseline State Machine
              {
              “name”: baseline,
              “events”: [
              {
              “name”: baselineCrossEvent,
              “type”: “output”,
              “data”: []
              },
              ],
              “states”: [
              {
              “name”: outsideBaselineZone,
              “events”: {}
              },
              {
              “name”: insideBaselineZone,
              “events”: {}
              },
              ],
              “transitions”: [
              {
              “trigger”: enterBaselineZone,
              “to”: insideBaselineZone,
              “from”: outsideBaselineZone,
              “emit”: autoRunEvent
              },
              {
              “trigger”: exitBaselineZone,
              “to”: outsideBaselineZone,
              “from”: insideBaselineZone
              },
              ]
              }

              //(@Auto) Scorable State Machine
              {
              “name”: scorable,
              “events”: [
              ],
              “states”: [
              {
              “name”: notScorable
              },
              {
              “name”: scorable
              }
              ],
              “transitions”: [
              {
              “trigger”: phaseChangeEvent, // Auto
              “to”: scorable,
              “from”: notScorable
              },
              {
              “trigger”: phaseChangeEvent, // Teleop
              “to”: notScorable,
              “from”: scorable
              }
              ]
              }

              //Red Force Column ScoreKeeper
              {
              “name”: redForceColumnScoreKeeper,
              listensTo: {
              redForceColumn{
              addCubeEvent : {cubeCount: int //1, 2, 3}
              }
              phaseChangeEvent: {
              phase: string // pre, auto, teleop, endGame, post}
              }
              }
              emits: {
              scoreEvent
              }

              //Red BoostColumn ScoreKeeper
              {
              “name”: redBostColumnScoreKeeper,
              listensTo: {
              redBoostColumn{
              addCubeEvent : {cubeCount: int //1, 2, 3}
              }
              phaseChangeEvent: {
              phase: string // pre, auto, teleop, endGame, post}
              }
              }
              emits: {
              scoreEvent
              }


              //Number of Cubes State Machine
              NumberOfCubesStateMachine: {

              “name”: “cube”
              “alliance”: “string” //red, blue
              “events”: {
              {
              “name” : “addCubeEvent”
              “type” : “input”
              “data”: {cubeCount: int //1, 2, 3}
              }
              “states”: [
              {
              “name”: 0 cubes,
              },
              {
              “name”: 1 cubes,
              },
              {
              “name”: 2 cubes,
              },
              {
              “name” : 3 cubes,
              }
              ],
              “transitions”: [
              {
              “from”: 0 cubes,
              “to”: 1 cubes
              “trigger”: “addCubeEvent” {alliance: string //red,
              blue},
              guard: alliance == alliance
              },
              {
              “from”: 1 cubes,
              “to”: 2 cubes
              “trigger”: “addCubeEvent” {alliance: string //red,
              blue},
              guard: alliance == alliance
              },
              {
              “from”: 2 cubes,
              “to”: 3 cubes,
              “trigger”: “addCubeEvent” {alliance: string //red,
              blue}
              “guard”: alliance == alliance
              },
              ]
              }

              //ScaleScoreKeeper
              {
              name : ScaleScoreKeeper,
              type : scoreKeeper,
              alliance : red
              listensTo : [
              {
              powerUpQueue : {
              powerUpEvent : {
              powerUp : string, // force, boost
              target : string, // switch, scale, both
              alliance : string, // red, blue
              status : string // activated, expired
              }
              }

              },
              {
              redPlateScale : {
              addCubeEvent : {owner : string // red, blue },
              removeCubeEvent : {owner : string // red, blue }
              },
              {
              bluePlateScale : {
              addCubeEvent : {owner : string // red, blue },
              removeCubeEvent : {owner : string // red, blue }
              },
              G25FoulTracker : {g25FoulEvent : {
              alliance : string // red, blue},
              field : {
              phaseChangeEvent : {
              phase : string
              // pre, auto, teleop, endGame, post}
              ],
              emits : {
              scoreEvent,
              futureScoreEvent,
              removeFutureScoreEvent,
              ownershipChangeEvent
              },

              },

              //ScaleOwnershipStateMachine
              Scale Ownership State Machine:{ // red is positive, blue is negative

              “name” : “ownership”,
              // “alliance” : “string”, // red, blue
              “events” : [
              {
              “name” : ownershipChangeEvent,
              “type” : “output”,
              “data” : [
              {
              “owner” : “string” // red, neutral, blue
              }
              ]
              }
              “data” : [
              {
              “name” : “ownershipCount”
              “type” : “int”
              },
              {
              name : forcedOwner,
              type : string // red, blue, none
              }
              ],
              dataUpdate : [
              {
              “event : “addCubeEvent”,
              “onReceive” : “if addCubeEvent.owner == red then ownershipCount++ else ownershipCount--“
              },
              {
              “event : “removeCubeEvent”,
              “onReceive” : “if removeCubeEvent.owner == red then ownershipCount-- else ownershipCount++“
              },
              {event},
              {}
              ],
              “initialState” : “neutralOwnership”,
              “states” : [
              {
              “name” : “redOwnership”
              “events” : {
              “onEntry” : “ownershipChangeEvent”:{ “owner” : red}
              }
              }
              {
              “name” : “neutralOwnership”
              “events” : {
              “onEntry” : “ownershipChangeEvent” : { “owner” : “neutral” }
              }
              }
              {
              “name” : “blueOwnership”
              “events” : {
              “onEntry” : “ownershipChangeEvent” : { “owner” : “blue” }
              }
              }
              ]
              “transitions” : [
              {
              // neutral to red b/c add
              “from” : “neutralOwnership”
              “trigger” : “addCubeEvent”
              “guard” : “ownershipCount > 0”
              “to” : {
              “onTrue” : “redOwnership”
              }
              }
              {
              // neutral to red b/c remove
              “from” : “neutralOwnership”
              “trigger” : “removeCubeEvent”
              “guard” : “ownershipCount > 0”
              “to” : {
              “onTrue” : “redOwnership”
              }
              }
              {
              // neutral to blue b/c add
              “from” : “neutralOwnership”
              “trigger” : “addCubeEvent”
              “guard” : “ownershipCount < 0”
              “to” : {
              “onTrue” : “blueOwnership”
              }
              }
              {
              // neutral to blue b/c remove
              “from” : “neutralOwnership”
              “trigger” : “removeCubeEvent”
              “guard” : “ownershipCount < 0”
              “to” : {
              “onTrue” : “blueOwnership”
              }
              }
              {
              // red to neutral b/c add
              “from” : “redOwnership”
              “trigger” : “addCubeEvent”
              “guard” : “ownershipCount == 0”
              “to” : {
              “onTrue” : “neutralOwnership”
              }
              }
              {
              // red to neutral b/c remove
              “from” : “redOwnership”
              “trigger” : “removeCubeEvent”
              “guard” : “ownershipCount == 0”
              “to” : {
              “onTrue” : “neutralOwnership”
              }
              }
              {
              // blue to neutral b/c add
              “from” : “blueOwnership”
              “trigger” : “addCubeEvent”
              “guard” : “ownershipCount == 0”
              “to” : {
              “onTrue” : “neutralOwnership”
              }
              }
              {
              // blue to neutral b/c remove
              “from” : “blueOwnership”
              “trigger” : “removeCubeEvent”
              “guard” : “ownershipCount == 0”
              “to” : {
              “onTrue” : “neutralOwnership”
              }
              }
              ]
            }
